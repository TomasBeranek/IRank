import argparse
import subprocess
import os
import gzip
import pickle
import json


def init_parser():
    parser = argparse.ArgumentParser(description='Extracts CPG graph for each sample in D2A dataset and a local copy of given project.')

    parser.add_argument('-r', '--repository', metavar='DIR', required=True, type=str, help='local copy (git clone) of given repository')
    parser.add_argument('-f', '--file', metavar='FILE', required=True, type=str, help='.pickle.gz file with D2A samples')
    parser.add_argument('-s', '--slicing-info', metavar='FILE', required=True, type=str, help='.csv file with slicing information generated by slicing_criteria_extraction.py')

    return parser


# Latest hash is first
def get_git_commit_hashes(repository_path):
    command = ['git', 'log', '--all', '--format=%H']
    output = subprocess.check_output(command, cwd=args.repository).decode().strip()
    commit_hashes = output.split('\n')

    return commit_hashes


def get_d2a_hashes(file):
    hashes = dict()

    with gzip.open(file, mode = 'rb') as f:
        while True:
            try:
                sample = pickle.load(f)
            except EOFError:
                break
            commit_url = sample['commit']['url']
            commit_hash = commit_url.split('/')[-1]

            if commit_hash not in hashes:
                # First sample with this hash
                hashes[commit_hash] = dict()

            # Associate current sample with its hash
            hashes[commit_hash][sample['id']] = {'label': sample['label'],
                                                 'compiler_args': sample['compiler_args'] }

    return hashes


if __name__ == '__main__':
    parser = init_parser()
    args = parser.parse_args()

    # Get chronological list of hashes
    hashes = get_git_commit_hashes(args.repository)

    # Get set of hashes present in D2A dataset
    d2a_hashes = get_d2a_hashes(args.file)

    # Remove hashes (commits) in which we are not interested in (not in D2A)
    hashes = [hash for hash in hashes if hash in d2a_hashes.keys()]

    # Navigate to given repository
    os.chdir(args.repository)

    # Latest commit is now last
    hashes = list(reversed(hashes))

    # Iterate over hashes and switch repository to given commits
    for hash in hashes:
        subprocess.run(['git', 'checkout', hash])

        # Iterate over samples in each commit
        # (multiple samples could have been found in a single commit)
        for id, val in d2a_hashes[hash].items():
            # Delete leftovers from previous compilation
            subprocess.run(['git', 'clean', '-df'])


    # git checkout branchname       - to lastest commit in given branch
    # git checkout hash             - to given commit
    # git clean -df                 - to remove untracked files (.bc files)

    # latest 4b0266174814e6cf60a275321121dbaab084ee64
    # latest in d2a a5895eb502747f396d3901a948834cd87d5fb0c3
