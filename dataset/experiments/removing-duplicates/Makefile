# This experiment demonstrates and verifies the functionality of the script for
# removing duplicate samples of the D2A dataset. The duplicate samples are
# bitcode/symlinks generated by the generate_bitcode.py script. The makefile
# contains 3 experiments:

# 	make experiment-1 -- identical samples are symlinks only,
# 	make experiment-2 -- identical samples contain exactly one bitcode file and
# 											 the rest are symlinks,
# 	make experiment-3 -- matched samples contain multiple bitcode files and any
# 											 number of symlinks.


BITCODE_DIR=bitcode

clean:
	rm -rf bitcode

reset: clean
	mkdir $(BITCODE_DIR)

	# Create httpd_0 .bc files
	mkdir $(BITCODE_DIR)/httpd_0

	# Data files
	touch $(BITCODE_DIR)/httpd_0/httpd_A_0.bc
	touch $(BITCODE_DIR)/httpd_0/httpd_E_0.bc
	touch $(BITCODE_DIR)/httpd_0/httpd_G_0.bc

	# Symlinks
	ln -s httpd_A_0.bc $(BITCODE_DIR)/httpd_0/httpd_B_0.bc
	ln -s httpd_G_0.bc $(BITCODE_DIR)/httpd_0/httpd_C_0.bc
	ln -s httpd_A_0.bc $(BITCODE_DIR)/httpd_0/httpd_D_0.bc
	ln -s httpd_E_0.bc $(BITCODE_DIR)/httpd_0/httpd_F_0.bc

	# Create httpd_1 .bc files
	mkdir $(BITCODE_DIR)/httpd_1

	# Data files
	touch $(BITCODE_DIR)/httpd_1/httpd_A_1.bc
	touch $(BITCODE_DIR)/httpd_1/httpd_B_1.bc

	# Symlinks
	ln -s httpd_A_1.bc $(BITCODE_DIR)/httpd_1/httpd_C_1.bc

experiment-1: reset
	tree bitcode
	# 1) Same samples: ['httpd_B_0', 'httpd_D_0', 'httpd_F_0', 'httpd_C_1']
	python3 ../dev-tools/remove_duplicates.py --d2a-dir test-1 --bitcode-dir bitcode
	tree bitcode

experiment-2: reset
	tree bitcode
	# 2) Same samples: ['httpd_B_0', 'httpd_E_0', 'httpd_F_0', 'httpd_C_1']
	python3 ../dev-tools/remove_duplicates.py --d2a-dir test-2 --bitcode-dir bitcode
	tree bitcode

experiment-3: reset
	tree bitcode
	# 3) Same samples: ['httpd_A_0', 'httpd_E_0', 'httpd_B_1', 'httpd_C_1']
	python3 ../dev-tools/remove_duplicates.py --d2a-dir test-3 --bitcode-dir bitcode
	tree bitcode
