{
    "label_source": "auto_labeler",
    "bug_type": "INTEGER_OVERFLOW_U5",
    "project": "libtiff",
    "bug_info": {
        "qualifier": "([1+max(0, `tif->tif_data->dec_oldcodep`), +oo] - [-oo, +oo]):signed64.",
        "file": "libtiff/tif_lzw.c",
        "procedure": "LZWDecodeCompat",
        "line": 758,
        "column": 4,
        "url": "https://gitlab.com/libtiff/libtiff/blob/b68fc85f398227fe59798e0eb4168effeb9e6bf4/libtiff/tif_lzw.c/#L758"
    },
    "adjusted_bug_loc": null,
    "bug_loc_trace_index": 4,
    "versions": {
        "before": "b68fc85f398227fe59798e0eb4168effeb9e6bf4",
        "after": "58a898cb4459055bb488ca815c23b880c242a27d"
    },
    "sample_type": "before_fix",
    "trace": [
        {
            "idx": 0,
            "level": 0,
            "description": "<LHS trace>",
            "func_removed": null,
            "file_removed": null,
            "file": "libtiff/tif_lzw.c",
            "loc": "595:1",
            "func_name": "LZWDecodeCompat",
            "func_key": "libtiff/tif_lzw.c@595:1-792:2",
            "is_func_definition": true,
            "url": "https://gitlab.com/libtiff/libtiff/blob/b68fc85f398227fe59798e0eb4168effeb9e6bf4/libtiff/tif_lzw.c/#L595"
        },
        {
            "idx": 1,
            "level": 0,
            "description": "Parameter `occ0`",
            "func_removed": null,
            "file_removed": null,
            "file": "libtiff/tif_lzw.c",
            "loc": "595:1",
            "func_name": "LZWDecodeCompat",
            "func_key": "libtiff/tif_lzw.c@595:1-792:2",
            "is_func_definition": true,
            "url": "https://gitlab.com/libtiff/libtiff/blob/b68fc85f398227fe59798e0eb4168effeb9e6bf4/libtiff/tif_lzw.c/#L595"
        },
        {
            "idx": 2,
            "level": 0,
            "description": "<RHS trace>",
            "func_removed": null,
            "file_removed": null,
            "file": "libtiff/tif_lzw.c",
            "loc": "756:4",
            "func_name": "LZWDecodeCompat",
            "func_key": "libtiff/tif_lzw.c@595:1-792:2",
            "is_func_definition": true,
            "url": "https://gitlab.com/libtiff/libtiff/blob/b68fc85f398227fe59798e0eb4168effeb9e6bf4/libtiff/tif_lzw.c/#L756"
        },
        {
            "idx": 3,
            "level": 0,
            "description": "Unknown value from: __infer_skip",
            "func_removed": null,
            "file_removed": null,
            "file": "libtiff/tif_lzw.c",
            "loc": "756:4",
            "func_name": "LZWDecodeCompat",
            "func_key": "libtiff/tif_lzw.c@595:1-792:2",
            "is_func_definition": true,
            "url": "https://gitlab.com/libtiff/libtiff/blob/b68fc85f398227fe59798e0eb4168effeb9e6bf4/libtiff/tif_lzw.c/#L756"
        },
        {
            "idx": 4,
            "level": 0,
            "description": "Binary operation: ([1+max(0, tif->tif_data->dec_oldcodep), +oo] - [-oo, +oo]):signed64",
            "func_removed": null,
            "file_removed": null,
            "file": "libtiff/tif_lzw.c",
            "loc": "758:4",
            "func_name": "LZWDecodeCompat",
            "func_key": "libtiff/tif_lzw.c@595:1-792:2",
            "is_func_definition": true,
            "url": "https://gitlab.com/libtiff/libtiff/blob/b68fc85f398227fe59798e0eb4168effeb9e6bf4/libtiff/tif_lzw.c/#L758"
        }
    ],
    "functions": {
        "libtiff/tif_lzw.c@595:1-792:2": {
            "file": "libtiff/tif_lzw.c",
            "loc": "595:1-792:2",
            "name": "LZWDecodeCompat",
            "touched_by_commit": true,
            "code": "static int\nLZWDecodeCompat(TIFF* tif, uint8* op0, tmsize_t occ0, uint16 s)\n{\n\tstatic const char module[] = \"LZWDecodeCompat\";\n\tLZWCodecState *sp = DecoderState(tif);\n\tchar *op = (char*) op0;\n\tlong occ = (long) occ0;\n\tchar *tp;\n\tunsigned char *bp;\n\tint code, nbits;\n\tlong nextbits, nextdata, nbitsmask;\n\tcode_t *codep, *free_entp, *maxcodep, *oldcodep;\n\n\t(void) s;\n\tassert(sp != NULL);\n\n\t/*\n\t  Fail if value does not fit in long.\n\t*/\n\tif ((tmsize_t) occ != occ0)\n\t        return (0);\n\n\t/*\n\t * Restart interrupted output operation.\n\t */\n\tif (sp->dec_restart) {\n\t\tlong residue;\n\n\t\tcodep = sp->dec_codep;\n\t\tresidue = codep->length - sp->dec_restart;\n\t\tif (residue > occ) {\n\t\t\t/*\n\t\t\t * Residue from previous decode is sufficient\n\t\t\t * to satisfy decode request.  Skip to the\n\t\t\t * start of the decoded string, place decoded\n\t\t\t * values in the output buffer, and return.\n\t\t\t */\n\t\t\tsp->dec_restart += occ;\n\t\t\tdo {\n\t\t\t\tcodep = codep->next;\n\t\t\t} while (--residue > occ);\n\t\t\ttp = op + occ;\n\t\t\tdo {\n\t\t\t\t*--tp = codep->value;\n\t\t\t\tcodep = codep->next;\n\t\t\t} while (--occ);\n\t\t\treturn (1);\n\t\t}\n\t\t/*\n\t\t * Residue satisfies only part of the decode request.\n\t\t */\n\t\top += residue;\n\t\tocc -= residue;\n\t\ttp = op;\n\t\tdo {\n\t\t\t*--tp = codep->value;\n\t\t\tcodep = codep->next;\n\t\t} while (--residue);\n\t\tsp->dec_restart = 0;\n\t}\n\n\tbp = (unsigned char *)tif->tif_rawcp;\n#ifdef LZW_CHECKEOS\n\tsp->dec_bitsleft = (((uint64)tif->tif_rawcc) << 3);\n#endif\n\tnbits = sp->lzw_nbits;\n\tnextdata = sp->lzw_nextdata;\n\tnextbits = sp->lzw_nextbits;\n\tnbitsmask = sp->dec_nbitsmask;\n\toldcodep = sp->dec_oldcodep;\n\tfree_entp = sp->dec_free_entp;\n\tmaxcodep = sp->dec_maxcodep;\n\n\twhile (occ > 0) {\n\t\tNextCode(tif, sp, bp, code, GetNextCodeCompat);\n\t\tif (code == CODE_EOI)\n\t\t\tbreak;\n\t\tif (code == CODE_CLEAR) {\n\t\t\tdo {\n\t\t\t\tfree_entp = sp->dec_codetab + CODE_FIRST;\n\t\t\t\t_TIFFmemset(free_entp, 0,\n\t\t\t\t\t    (CSIZE - CODE_FIRST) * sizeof (code_t));\n\t\t\t\tnbits = BITS_MIN;\n\t\t\t\tnbitsmask = MAXCODE(BITS_MIN);\n\t\t\t\tmaxcodep = sp->dec_codetab + nbitsmask;\n\t\t\t\tNextCode(tif, sp, bp, code, GetNextCodeCompat);\n\t\t\t} while (code == CODE_CLEAR);\t/* consecutive CODE_CLEAR codes */\n\t\t\tif (code == CODE_EOI)\n\t\t\t\tbreak;\n\t\t\tif (code > CODE_CLEAR) {\n\t\t\t\tTIFFErrorExt(tif->tif_clientdata, tif->tif_name,\n\t\t\t\t\"LZWDecode: Corrupted LZW table at scanline %d\",\n\t\t\t\t\t     tif->tif_row);\n\t\t\t\treturn (0);\n\t\t\t}\n\t\t\t*op++ = (char)code;\n\t\t\tocc--;\n\t\t\toldcodep = sp->dec_codetab + code;\n\t\t\tcontinue;\n\t\t}\n\t\tcodep = sp->dec_codetab + code;\n\n\t\t/*\n\t\t * Add the new entry to the code table.\n\t\t */\n\t\tif (free_entp < &sp->dec_codetab[0] ||\n\t\t    free_entp >= &sp->dec_codetab[CSIZE]) {\n\t\t\tTIFFErrorExt(tif->tif_clientdata, module,\n\t\t\t    \"Corrupted LZW table at scanline %d\", tif->tif_row);\n\t\t\treturn (0);\n\t\t}\n\n\t\tfree_entp->next = oldcodep;\n\t\tif (free_entp->next < &sp->dec_codetab[0] ||\n\t\t    free_entp->next >= &sp->dec_codetab[CSIZE]) {\n\t\t\tTIFFErrorExt(tif->tif_clientdata, module,\n\t\t\t    \"Corrupted LZW table at scanline %d\", tif->tif_row);\n\t\t\treturn (0);\n\t\t}\n\t\tfree_entp->firstchar = free_entp->next->firstchar;\n\t\tfree_entp->length = free_entp->next->length+1;\n\t\tfree_entp->value = (codep < free_entp) ?\n\t\t    codep->firstchar : free_entp->firstchar;\n\t\tif (++free_entp > maxcodep) {\n\t\t\tif (++nbits > BITS_MAX)\t\t/* should not happen */\n\t\t\t\tnbits = BITS_MAX;\n\t\t\tnbitsmask = MAXCODE(nbits);\n\t\t\tmaxcodep = sp->dec_codetab + nbitsmask;\n\t\t}\n\t\toldcodep = codep;\n\t\tif (code >= 256) {\n\t\t\t/*\n\t\t\t * Code maps to a string, copy string\n\t\t\t * value to output (written in reverse).\n\t\t\t */\n\t\t\tif(codep->length == 0) {\n\t\t\t\tTIFFErrorExt(tif->tif_clientdata, module,\n\t\t\t\t    \"Wrong length of decoded \"\n\t\t\t\t    \"string: data probably corrupted at scanline %d\",\n\t\t\t\t    tif->tif_row);\n\t\t\t\treturn (0);\n\t\t\t}\n\t\t\tif (codep->length > occ) {\n\t\t\t\t/*\n\t\t\t\t * String is too long for decode buffer,\n\t\t\t\t * locate portion that will fit, copy to\n\t\t\t\t * the decode buffer, and setup restart\n\t\t\t\t * logic for the next decoding call.\n\t\t\t\t */\n\t\t\t\tsp->dec_codep = codep;\n\t\t\t\tdo {\n\t\t\t\t\tcodep = codep->next;\n\t\t\t\t} while (codep->length > occ);\n\t\t\t\tsp->dec_restart = occ;\n\t\t\t\ttp = op + occ;\n\t\t\t\tdo  {\n\t\t\t\t\t*--tp = codep->value;\n\t\t\t\t\tcodep = codep->next;\n\t\t\t\t}  while (--occ);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tassert(occ >= codep->length);\n\t\t\top += codep->length;\n\t\t\tocc -= codep->length;\n\t\t\ttp = op;\n\t\t\tdo {\n\t\t\t\t*--tp = codep->value;\n\t\t\t} while( (codep = codep->next) != NULL );\n\t\t} else {\n\t\t\t*op++ = (char)code;\n\t\t\tocc--;\n\t\t}\n\t}\n\n\ttif->tif_rawcc -= (tmsize_t)( (uint8*) bp - tif->tif_rawcp );\n\ttif->tif_rawcp = (uint8*) bp;\n\tsp->lzw_nbits = (unsigned short)nbits;\n\tsp->lzw_nextdata = nextdata;\n\tsp->lzw_nextbits = nextbits;\n\tsp->dec_nbitsmask = nbitsmask;\n\tsp->dec_oldcodep = oldcodep;\n\tsp->dec_free_entp = free_entp;\n\tsp->dec_maxcodep = maxcodep;\n\n\tif (occ > 0) {\n#if defined(__WIN32__) && (defined(_MSC_VER) || defined(__MINGW32__))\n\t\tTIFFErrorExt(tif->tif_clientdata, module,\n\t\t\t\"Not enough data at scanline %d (short %I64d bytes)\",\n\t\t\t     tif->tif_row, (unsigned __int64) occ);\n#else\n\t\tTIFFErrorExt(tif->tif_clientdata, module,\n\t\t\t\"Not enough data at scanline %d (short %llu bytes)\",\n\t\t\t     tif->tif_row, (unsigned long long) occ);\n#endif\n\t\treturn (0);\n\t}\n\treturn (1);\n}"
        }
    },
    "commit": {
        "url": "https://gitlab.com/libtiff/libtiff/commit/58a898cb4459055bb488ca815c23b880c242a27d",
        "changes": [
            {
                "before": "libtiff/tif_lzw.c",
                "after": "libtiff/tif_lzw.c",
                "changes": [
                    "604,0^^605,1",
                    "756,4^^757,2",
                    "761,2^^760,9"
                ]
            }
        ]
    },
    "compiler_args": {
        "libtiff/tif_lzw.c": "-DHAVE_CONFIG_H -I<$repo$>/libtiff -DPIC"
    },
    "zipped_bug_report": "H4sIAHBjQ18C/82TS0/DMAyAz+xXWOKysbVsYmm7wHoAhJiEBOIhJBB0WeuOaG1SpdnGQ/x33O4A4jEhcSGHNE78+GzXm71usNPI5MTKNN2mLcqel27MfRZwQGO04TBSFqdo4HSBJs30Eq5YA6B522vn4rHZ7cCY7JywMk6EFU6YYBzpLIl1gsW41YG21nfgwK2j9Upo8VJOFSZe3218E5wNGO9x2Ds5vgBrRIxhgw12XHilT98F2pkLpRVWxiCVJRha93TtuXByc32IVeQDnRfCNi9HR0dbQL47MCfdYAt0Qcg2L+UzRhZ0HHdXTz0PyhY58V14WUN1JozI0VI9xpXt+D+g+czjfSrY+XvBfEY4G7QmBsVsl2RWy6908uqTKEs0tklRIBxC3SwnzFBN7UNrdwVes/vMr/V1Ae1PepXbYPVIXpwvrz+jXqmZ0ksFC5HNEVKjcw5RJFWKJipnsvjH/EHFvy+VME/UMDTUa634x3lYMw7rp+GXuf0ho49lGdR6toAh5UGGXre+SDT9ZG84mAfJGAQAAA=="
}
