#!/bin/bash

# ******************************************************************************
#  File:            wrapper
#  Master's Thesis: Evaluating Reliability of Static Analysis Results
#                   Using Machine Learning
#  Author:          Beranek Tomas (xberan46)
#  Date:            14.5.2024
#  Up2date sources: https://github.com/TomasBeranek/but-masters-thesis
#  Description:     Template for compiler wrappers that capture example commands
#                   with which they launch Infer's analysis and generate LLVM
#                   bitcode.
# ******************************************************************************

trap unlock_on_exit EXIT INT TERM

compiler="COMPILER_NAME"
compiler_original="${compiler}-original"
all_options=("$@")
infer_dir="/tmp/infer-out"
skip_capture=false
lock_dir="/tmp/infer.lockdir"
pid_file="${lock_dir}/PID"
bitcode_files_list="${infer_dir}/old_bc_files.txt"

function lock {
  mkdir "${lock_dir}" > /dev/null 2>&1 && echo $$ > ${pid_file}
}

# unlocks the lock even if this process isnt the owner
function unlock {
  PID=$(cat ${pid_file} 2>&1)
  rm -rf ${lock_dir}
}

# checks if the lock owner still exists -- if not, the lock is removed
function lock_failed {
  PID=$(cat ${pid_file} 2>&1)  # 2>&1 -- do not print anything if cat fails

  # an error while reading PID file, e.g. PID file wasnt created yet
  if [ $? != 0 ]; then
    return
  fi

  # lock owner doesnt exist anymore -- remove the lock
  if ! kill -0 ${PID} &>/dev/null; then
    unlock
  fi
}

# checks if the lock owner is this script -- if so, the lock is removed
function unlock_on_exit {
  PID=$(cat ${pid_file} 2>&1)  # 2>&1 -- do not print anything if cat fails

  # if PID file was loaded correctly
  if [ $? == 0 ]; then
    # if this script still owns the lock then remove it
    if [ "$$" == "${PID}" ]; then
      unlock
    fi
  fi

  # restore all passed options
  set -- "${all_options[@]}"

  # return code is carried back to a caller
  ${compiler_original} "$@"
  exit $?
}

if [[ $# -eq 1 && "$1" == *"@/tmp/"* ]] ;
then
  skip_capture=true
  set -- "/usr/bin/${compiler_original}"
fi

for var in "$@"
do
    if [[ "$var" =~ conftest[0-9]*\.c$ ]] ;
    then
      skip_capture=true
    fi
done

if [ "${skip_capture}" = false ]
then
  # delete incompatible options of Infers clang
  for arg do
    shift
    [ "$arg" = "-fstack-clash-protection" ] && continue
    [ "$arg" = "-flto=auto" ] && continue
    [ "$arg" = "-flto=jobserver" ] && continue
    [ "$arg" = "-ffat-lto-objects" ] && continue
    [[ "$arg" =~ "-flto-jobs=[0-9]*" ]] && continue
    [ "$arg" = "-flto=thin" ] && continue
    [ "$arg" = "-flto=full" ] && continue
    [ "$arg" = "-fsplit-lto-unit" ] && continue
    [ "$arg" = "-fvirtual-function-elimination" ] && continue
    [ "$arg" = "-flto=full" ] && continue
    [ "$arg" = "-fwhole-program-vtables" ] && continue
    [ "$arg" = "-fno-leading-underscore" ] && continue
    [ "$arg" = "-mno-avx256-split-unaligned-load" ] && continue
    [ "$arg" = "-mno-avx256-split-unaligned-store" ] && continue
    set -- "$@" "$arg"
  done

  # critical section
  while :
  do
    if lock
    then
      # lock acquired
      # logging
      >&2 echo ""
      >&2 echo "NOTE: INFER: ${compiler}-wrapper: running capture phase"

      # capture compiled source files
      if infer capture --reactive -o ${infer_dir} --force-integration cc -- ${compiler} "$@" 1>&2
      then
        >&2 echo "NOTE: INFER: ${compiler}-wrapper: successfully captured: \"${compiler} $@\""
      else
        >&2 echo "WARNING: INFER: ${compiler}-wrapper: unsuccessfully captured: \"${compiler} $@\""
      fi
      >&2 echo ""

      # if this has not already happened, save the .bc files already present on the system to determine which have been newly created
      if [ ! -e ${bitcode_files_list} ]
      then
        >&2 echo "NOTE: LLVM: ${compiler}-wrapper: saving already present bitcode files"
        find / -type f -name "*.bc" 2> /dev/null > ${bitcode_files_list}
        >&2 echo "NOTE: LLVM: ${compiler}-wrapper: already present bitcode files have been saved"
        >&2 echo ""
      fi

      # generate llvm bitcode from compiled source files
      >&2 echo "NOTE: LLVM: ${compiler}-wrapper: generating bitcode"

      # first we need to remove the -o option so that the command generates .bc files instead
      original_args="$@"
      skip_next=false
      for arg do
        shift
        if [ "${skip_next}" = true ]
        then
          skip_next=false
          continue
        fi
        # we have found '-o' option -- skip it and the next one
        [ "${arg}" = "-o" ] && skip_next=true && continue
        set -- "$@" "${arg}"
      done

      if clang-original -emit-llvm -g -grecord-command-line -fno-inline-functions -fno-builtin "$@" 1>&2
      then
        >&2 echo "NOTE: LLVM: ${compiler}-wrapper: successfully generated bitcode for command: \"${compiler} ${original_args}\""
      else
        >&2 echo "WARNING: LLVM: ${compiler}-wrapper: failed to generate bitcode for command: \"${compiler} ${original_args}\""
      fi

      unlock
      break
    #else
      # lock_failed
    fi
  done
fi
