# ******************************************************************************
#  File:            extended_cpg.pbtxt
#  Master's Thesis: Evaluating Reliability of Static Analysis Results
#                   Using Machine Learning
#  Author:          Beranek Tomas (xberan46)
#  Date:            14.5.2024
#  Up2date sources: https://github.com/TomasBeranek/but-masters-thesis
#  Description:     TF-GNN schema for ECPGs.
# ******************************************************************************

# ECPG (Extended Code Property Graph)

context {
  features {
    key: "label"
    value: {
      description: "A label classifying if the sample is TP (True) or FP (False)."
      dtype: DT_INT32
    }
  }

  features {
    key: "BUG_TYPE"
    value: {
      description: "Encoded and normalized bug type."
      dtype: DT_FLOAT
    }
  }

  features {
    key: "LINE"
    value: {
      description: "Normalized line number on which the bug was found."
      dtype: DT_FLOAT
    }
  }
}

# This document details each node and edge set, specifying whether they are incorporated into this schema. If not included, the reasons are documented. All information is sourced from the official Joern documentation, which has been automatically generated from the code, ensuring structural accuracy. The documentation is version 1.1, available at https://cpg.joern.io/, and used Joern version is 1.1.1169, which matches the documentation version.


# MetaData Layer (https://cpg.joern.io/#schema-ref-metadata):
#   nodes_META_DATA_*

# This layer contains a single node of the META_DATA type with ID:1 in each CPG. The node contains metadata related to the generation of the CPG. The node will not be used due to:
#    1) All relevant information is already known (for example, it is known that the generation is from LLVM),
#    2) Every graph contains a node with the same information (all graphs have been generated in the same way),
#    3) This information will not be useful for the model (information about generation from the LLVM language would be useful if the graphs were also generated from other languages, but this is not planned - moreover, other languages would likely first be converted to LLVM).


# FileSystem Layer (https://cpg.joern.io/#schema-ref-filesystem)
#   nodes_FILE_*
#   edges_SOURCE_FILE_*

# Nodes of the FILE type represent source files or compiled libraries from which the CPG was generated. The NAMESPACE_BLOCK, METHOD, TYPE_DECL, COMMENT, and LOCATION types of nodes are source nodes of the SOURCE_FILE edge type, which connects them to the FILE type node, representing the source file/library they originate from. In the case of using the D2A pipeline, all files with LLVM are merged into a single one using llvm-link, so that CPG graphs can later be generated from them. As a result, all FILE type nodes (of all graphs) list llvm-link as the source file. Joern was unable to retrieve information about the original files. Therefore, FILE nodes and SOURCE_FILE edges are not used, as they do not provide any new information.


# Namespace Layer (https://cpg.joern.io/#schema-ref-namespace)
#   nodes_NAMESPACE_*
#   nodes_NAMESPACE_BLOCK_*

# As the name suggests, these nodes represent namespaces. These nodes are not used because:
#    1) The C language itself does not have namespaces (nor does LLVM IR),
#    2) Namespace information is therefore supplemented as '<global>' or 'llvm-link_global'â€”this does not add any useful information.


# Method Layer (https://cpg.joern.io/#schema-ref-method)
#   nodes_METHOD_*
#   nodes_METHOD_PARAMETER_IN_*
#   nodes_METHOD_PARAMETER_OUT_*
#   nodes_METHOD_RETURN_*

# The Method Layer describes information about each function. The METHOD node represents the function itself - containing its name, signature, source file, and information on whether the source code is available (indicated by the IS_EXTERNAL column). METHOD nodes also serve as the target node for CALL edges, which connect the call site (CALL node) to the actual function (METHOD node). Attached to each METHOD node (via AST edges) are METHOD_PARAMETER_IN and METHOD_PARAMETER_OUT nodes, which serve as links between the METHOD node and the parameters of the function. The distinction between METHOD_PARAMETER_IN and METHOD_PARAMETER_OUT exists only in languages dealing with dynamic types - which is not the case for LLVM IR. Consequently, all METHOD_PARAMETER_OUT nodes are removed. The METHOD_RETURN node, which represents the abstraction of the return value, is also connected to the METHOD node (via AST). This node is linked by CFG edges to a RETURN node (or more, if a function has multiple 'ret' statements in LLVM IR - although this is uncommon since a return variable is typically used that overwrites where the original 'return' in C would be and then returns this value at the end of the function). The METHOD, METHOD_PARAMETER_IN, and METHOD_RETURN nodes are all used because:
#    1) Together they are few - typically 1x METHOD, 1x RETURN, and Nx METHOD_PARAMETER_IN for each function, where N is the number of function parameters, and relatively few edges lead to these nodes,
#    2) They serve as a very clear and explicit connection between the call site and the called function (suitably passing argument values to parameters and the return value of the function call).

# It's also important to note that METHOD_PARAMETER_IN can be VARIADIC (marked by the IS_VARIADIC column), meaning it represents an arbitrary number of parameters, as in C denoted by '...' as in 'int printf(const char *format, ...)'. Furthermore, every operation such as addition, subtraction, dereferencing, etc., is modeled as a function call - see model/scheme/examples/arg-passing/.

# For the METHOD_PARAMETER_IN node, the INDEX is not preserved, even though it might seem like crucial information. The reason is that the ORDER (from AST_NODE) has the same value as INDEX and is already present - thus, redundancy is removed, and METHOD_PARAMETER_IN can be included as an AST_NODE. However, for this to be possible, the IS_VARIADIC information must be removed - here we really lose information, but variadic functions are not that common (most are in libraries) and this greatly simplifies the schema - making METHOD_PARAMETER_IN the same as AST_NODE.

node_sets {
  key: "METHOD_INFO"
  value {
    description: "This node represents additional information for each method."

    features {
      key: "HASH"
      value: {
        description: "Normalized hash of METHOD_FULL_NAME."
        dtype: DT_FLOAT
      }
    }

    features {
      key: "IS_EXTERNAL"
      value: {
        description: "Information whether the method is external or not (we don't have it's source code)."
        dtype: DT_FLOAT
      }
    }

    features {
      key: "OPERATOR"
      value: {
        description: "If the method is an LLVM IR operator, OPERATOR contains its normalized categorical label."
        dtype: DT_FLOAT
      }
    }
  }
}

edge_sets {
  key: "METHOD_INFO_LINK"
  value {
    description: "These edges connect the METHOD_INFO nodes to the given METHOD node."
    source: "METHOD_INFO"
    target: "AST_NODE"
  }
}


# Type Layer (https://cpg.joern.io/#schema-ref-type)
#   nodes_MEMBER_*
#   nodes_TYPE_*
#   nodes_TYPE_ARGUMENT_*
#   nodes_TYPE_DECL_*
#   nodes_TYPE_PARAMETER_*
#   edges_ALIAS_OF_*
#   edges_BINDS_TO_*
#   edges_INHERITS_FROM_*

# Nodes TYPE_ARGUMENT, TYPE_PARAMETER, and BINDS_TO edges model parameterizable data types - such as Java Generics and C++ templates. However, these types do not appear in LLVM IR, and therefore, the graphs do not contain them. Similarly, INHERITS_FROM edges are not present in the graphs. Nonetheless, the Type Layer models type hierarchies and aliases. LLVM IR allows for both structured data types and aliases (https://groups.seas.harvard.edu/courses/cs153/2019fa/lectures/Lec07-Datastructs.pdf). In the C language (the primary focus of this work), structured data types (struct Name {...}) and aliases (typedef OldName NewName) are also present. However, when converting from C to LLVM IR, aliases are removed (real names are used) and some structures are decomposed (though not all, examples of preserved struct and removed alias can be seen in <REPO>/model/schemas/struct-alias/ - it's advisable to look into human-readable LLVM IR). For this reason, it is necessary to include information about structures in the output graphs - meaning names of structures, their elements, and hierarchy. If we use the Type Layer for this purpose, it simplifies the other AST nodes - many AST nodes (where it makes sense e.g., LOCAL, LITERAL, IDENTIFIER, ...) contain associated information about their data type. Also, such a node is connected by an EVAL_TYPE edge to a TYPE node, thus creating redundant information about data types. Since we need TYPE nodes for information about structured data types, we will keep only them and remove the information in AST nodes - thus significantly simplifying AST nodes. TYPE nodes will only be removed if they have no incoming edges - these are:

#    1) Metadata remnants from original aliases, but since these aliases are not used anywhere in the actual LLVM IR code, this information is unnecessary.
#    2) Function signatures - they are also redundant, as each callsite is connected with the arguments/parameters of the called function (which are connected with their data type) and its return value (which is also connected with its data type), so the signature is implicitly given embedded in the graph.

# Further, we will remove TYPE_DECL nodes, which do not add any information over TYPE nodes when used on LLVM IR. However, if the input were a language with parameterized types, a TYPE_DECL node would represent, for example, List[T] (the parameterizable type itself) and a TYPE node would represent List[Int] (an instance of the parameterizable data type). TYPE_DECL nodes, however, connect TYPE nodes with their components (if any) - MEMBER type nodes. After removing some TYPE_DECL nodes, it is necessary to reconnect MEMBER nodes. ALIAS_OF edges connect TYPE nodes (original alias names) with their type (TYPE node), but since these "alias" nodes will be removed, it does not make sense to preserve ALIAS_OF edges. Verification that "alias" nodes and ALIAS_OF edges are unnecessary can be done by removing all TYPE nodes that do not have any incoming EVAL_TYPE edges (no part of the code uses this type), which will also remove all ALIAS_OF edges.

# MEMBER nodes serve as latent nodes connecting a TYPE node (structure) with another TYPE node (data type of the structure component, which can again be a struct - thus forming a hierarchy in the graph). The only potentially useful information is the name of the subcomponent in the original C code; however, this name is not used anywhere in the LLVM IR code and is therefore discarded. However, it could carry certain types of semantic information - for example, if the component name is PID, certain conclusions about its value or use might be inferred.

node_sets {
  key: "TYPE"
  value {
    description: "This node represents a data type."

    features {
      key: "INT"
      value: {
        description: "If it is an integer, its normalized size in bits is stored here."
        dtype: DT_FLOAT
      }
    }

    features {
      key: "FP"
      value: {
        description: "If it is a floating point, its normalized categorical label is stored here (0 for void type)."
        dtype: DT_FLOAT
      }
    }

    features {
      key: "HASH"
      value: {
        description: "Normalized hash of the data type name if it is an array, structure or user-defined type."
        dtype: DT_FLOAT
      }
    }

    features {
      key: "PTR"
      value: {
        description: "Normalized information whether this type is a pointer. 0 - not a pointer, > 0 how many times a pointer."
        dtype: DT_FLOAT
      }
    }

    features {
      key: "LEN"
      value: {
        description: "Normalized information whether this type is an array. 0 - not an array, > 0 array size."
        dtype: DT_FLOAT
      }
    }
  }
}

node_sets {
  key: "MEMBER"
  value {
    description: "This node represents member of structured data type."

    features {
      key: "ORDER"
      value: {
        description: "The order of a node in the AST tree among its siblings. In this case it is an order in the structure."
        dtype: DT_FLOAT
      }
    }
  }
}

edge_sets {
  key: "EVAL_MEMBER_TYPE"
  value {
    description: "This edge connects a MEMBER node to its evaluation type."
    source: "TYPE"
    target: "MEMBER"
  }
}

edge_sets {
  key: "CONSISTS_OF"
  value {
    description: "A CONSISTS_OF edge connects TYPE node with it's MEMBER nodes (if there are any)."
    source: "MEMBER"
    target: "TYPE"
  }
}


# AST Layer (https://cpg.joern.io/#schema-ref-ast)
#   nodes_AST_NODE_*
#   nodes_BLOCK_*
#   nodes_CALL_*
#   nodes_CALL_REPR_*
#   nodes_CONTROL_STRUCTURE_*
#   nodes_EXPRESSION_*
#   nodes_FIELD_IDENTIFIER_*
#   nodes_IDENTIFIER_*
#   nodes_JUMP_LABEL_*
#   nodes_JUMP_TARGET_*
#   nodes_LITERAL_*
#   nodes_LOCAL_*
#   nodes_METHOD_REF_*
#   nodes_MODIFIER_*
#   nodes_RETURN_*
#   nodes_TYPE_REF_*
#   nodes_UNKNOWN_*
#   edges_AST_*
#   edges_CONDITION_*

# The AST Layer creates abstract syntax trees from the input code. All nodes have the base class AST_NODE and are connected by AST edges. Nodes labeled AST_NODE merely represent the base class, defining properties for all AST nodes and thus are not present in the graphs. BLOCK nodes represent compound statements - in C, Java, C++, and LLVM IR, these are denoted by '{}'. While BLOCK nodes themselves do not carry useful information, they effectively cluster other types of nodes in the AST, such as representing the body of a function with its top-level statements as child nodes. Therefore, BLOCK nodes are retained for conveying information during GNN computation.

# CALL nodes represent the invocation of functions/methods/procedures. Along with the Type and CallGraph layers, they form crucial connections between the call sites and the called functions (callee). Thus, CALL nodes are preserved. CALL_REPR serves only as a base class for CALL nodes and hence does not appear in the graph.

# Nodes like CONTROL_STRUCTURE, JUMP_LABEL, and JUMP_TARGET respectively represent control flow structures, jump label names, and jump targets. In LLVM IR, there are no high-level control structures presentâ€”only conditional and unconditional jumps. However, these are not represented as nodes but through PDG and CFG edges, as shown in model/schemas/examples/arg-passing. None of the CONTROL_STRUCTURE, JUMP_LABEL, JUMP_TARGET nodes are present in the graphs.

# EXPRESSION nodes are again just a base class and as such, are not present. FIELD_IDENTIFIER nodes represent arrays, and since LLVM IR supports the array data type, these nodes are retained. IDENTIFIER nodes represent variables and are thus kept. LITERAL nodes signify constants of various data types, with their values stored as special LITERAL_VALUE nodes. LOCAL nodes represent local variables, and information about whether a variable is local can be useful; since there are not many such nodes, they are retained.

# METHOD_REF nodes represent references to methods/functions/procedures when used as arguments in calls. For these nodes, there is no need to retain the names of the functions they represent, as they are connected by REF edges to METHOD nodes. MODIFIER nodes, which represent modifiers like static/private/public, do not appear in graphs generated from LLVM IR.

# RETURN nodes represent 'return' statements of functions/methods/procedures. These nodes are essential for passing back information from functions to their call sites. TYPE_REF nodes signify references to types/classes. These nodes do not appear in the graphs. UNKNOWN nodes represent the remaining AST nodes for which no other type is suitable. These nodes are kept in the graph mainly to preserve the edges.

# AST edges form the foundation of the CPG graph and are thus preserved. CONDITION edges connect control structures to their controlling conditions. However, since control structures in the graph (in the case of LLVM IR) do not have their nodes, these edges do not appear in the graph.

node_sets {
  key: "AST_NODE"
  value {
    description: "AST (Abstract Syntax Tree) nodes."

    features {
      key: "LABEL"
      value: {
        description: "Original node type."
        dtype: DT_FLOAT
      }
    }

    features {
      key: "ORDER"
      value: {
        description: "The order of a node in the AST tree among its siblings."
        dtype: DT_FLOAT
      }
    }
  }
}

node_sets {
  key: "LITERAL_VALUE"
  value {
    description: "This node stores value of LITERAL nodes."

    features {
      key: "INT"
      value: {
        description: "If LITERAL is of the integer data type, its normalized value is here."
        dtype: DT_FLOAT
      }
    }

    features {
      key: "FP_MANTISSA"
      value: {
        description: "If LITERAL is of floating point data type, there is its normalized mantissa."
        dtype: DT_FLOAT
      }
    }

    features {
      key: "FP_EXPONENT"
      value: {
        description: "If LITERAL is of the floating point data type, here is its normalized exponent."
        dtype: DT_FLOAT
      }
    }

    features {
      key: "HASH"
      value: {
        description: "If LITERAL is of array, struct, or user data type, here is its normalized hashed value."
        dtype: DT_FLOAT
      }
    }

    features {
      key: "INVALID_POINTER"
      value: {
        description: "Flag if the pointer contains 'nullptr'."
        dtype: DT_FLOAT
      }
    }

    features {
      key: "ZERO_INITIALIZED"
      value: {
        description: "Flag if the value was initialized by zeroes."
        dtype: DT_FLOAT
      }
    }

    features {
      key: "UNDEF"
      value: {
        description: "Flag if the value contains 'undef'."
        dtype: DT_FLOAT
      }
    }
  }
}

edge_sets {
  key: "AST"
  value {
    description: "Edges of AST (Abstract Syntax Tree)."
    source: "AST_NODE"
    target: "AST_NODE"
  }
}

edge_sets {
  key: "LITERAL_VALUE_LINK"
  value {
    description: "These edges connect the LITERAL_VALUE nodes to the given LITERAL node."
    source: "LITERAL_VALUE"
    target: "AST_NODE"
  }
}


# CallGraph Layer (https://cpg.joern.io/#schema-ref-callgraph)
#   edges_ARGUMENT_*
#   edges_CALL_*
#   edges_RECEIVER_*

# The CallGraph Layer models function calls. ARGUMENT edges connect CALL nodes with their arguments (nodes of type EXPRESSION) and also link RETURN nodes with the value they return (again, a node of type EXPRESSION). These nodes are useful because within the AST, they allow for distinguishing function arguments/return values from othersâ€”making them more explicit and, at the same time, relatively few in number. CALL edges connect CALL nodes and METHOD nodes, and are essential for effective information propagation between a function call and the function itselfâ€”thus, they must be retained. RECEIVER edges serve to link a CALL node with the object upon which the method is called. These edges are useful in object-oriented programming (OOP) contexts, which LLVM IR is not. Therefore, RECEIVER edges are omitted from the graph. This setup ensures that the essential connections in function call dynamics are maintained in the graph while removing elements that do not contribute to the representation or analysis in the context of LLVM IR.

edge_sets {
  key: "ARGUMENT"
  value {
    description: "Argument edges connect call sites to their arguments as well as `RETURN` nodes to the expressions that return."
    source: "AST_NODE"
    target: "AST_NODE"

    features {
      key: "ARGUMENT_INDEX"
      value: {
        description: "AST-children of CALL nodes have an argument index, that is used to match call-site arguments with callee parameters."
        dtype: DT_FLOAT
      }
    }
  }
}

edge_sets {
  key: "CALL"
  value {
    description: "This edge connects call sites to the method they invoke."
    source: "AST_NODE"
    target: "AST_NODE"
  }
}


# CFG Layer (https://cpg.joern.io/#schema-ref-cfg)
#   nodes_CFG_NODE_*
#   edges_CFG_*

# CFG_NODE nodes serve as the base class for all Control Flow Graph (CFG) nodes; therefore, they themselves are not present in the graph. CFG edges are a fundamental part of the Code Property Graph (CPG) and are thus included as an essential component of this model. These edges are crucial for mapping the flow of control within the program, helping to outline how execution progresses through various code blocks and decision points. This inclusion ensures the graph accurately represents the dynamic aspects of program execution.

edge_sets {
  key: "CFG"
  value {
    description: "This edge indicates control flow from the source to the destination node."
    source: "AST_NODE"
    target: "AST_NODE"
  }
}


# Dominators Layer (https://cpg.joern.io/#schema-ref-dominators)
#   edges_DOMINATE_*
#   edges_POST_DOMINATE_*

# This layer includes edges that form dominator and post-dominator trees for all methods. The logic behind dominators is derived from (https://www.cs.princeton.edu/courses/archive/spr04/cos598C/lectures/02-ControlFlow.pdf). The DOMINATE/POST_DOMINATE edge connects CFG nodes. A DOMINATE edge from node A to node B indicates that node A dominates node Bâ€”meaning that every path in the CFG from the initial node to B must include A. Similarly, a POST_DOMINATE edge from node A to node B signifies that node A post-dominates node Bâ€”meaning that every path in the CFG from node B to the exit node must include A. While these edges can provide a more explicit expression of the relationships between CFG nodes, they are merely a straightforward extension of the CFG and will not be included in the basic model data.


# PDG Layer (https://cpg.joern.io/#schema-ref-pdg)
#   edges_CDG_*
#   edges_REACHING_DEF_*

# The CDG (Control Dependence Graph) edge is a part of the Code Property Graph (CPG) and thus is included in the input of this model. Along with CDG edges, REACHING_DEF edges contribute to the Program Dependence Graph (PDG) Layer. A REACHING_DEF edge indicates that a variable at the source node reaches the target node without being reassigned along the way. This edge provides valuable information as it establishes data dependencies within the program.

# However, the number of REACHING_DEF edges can be excessive, potentially overwhelming the model and significantly increasing the computational complexity of training. Therefore, in this version, REACHING_DEF edges will not be used.

edge_sets {
  key: "CDG"
  value {
    description: "A CDG edge expresses that the destination node is control dependent on the source node."
    source: "AST_NODE"
    target: "AST_NODE"
  }
}


# Comment Layer (https://cpg.joern.io/#node-ref-comment)
#   nodes_COMMENT_*

# This layer represents comments within the code. During the creation of LLVM IR, the source code in C undergoes preprocessing by the compiler, which, among other things, removes comments. For this reason, there are no COMMENT nodes present in the graph.


# Finding Layer (https://cpg.joern.io/#schema-ref-finding)
#   nodes_FINDING_*
#   nodes_KEY_VALUE_PAIR_*

# This layer facilitates the storage of analysis results (such as vulnerabilities, loop complexities, etc.) related to various nodes. However, Joern does not produce these nodes in its default setup, and therefore they are not utilized.


# Shortcuts Layer (https://cpg.joern.io/#schema-ref-shortcuts)
#   edges_CONTAINS_*
#   edges_EVAL_TYPE_*
#   edges_PARAMETER_LINK_*

# The CONTAINS edges connect METHOD nodes with all nodes that belong to the respective method. Although these edges provide useful information and could facilitate effective information propagation within functions, the sheer number of these edges is excessively high.

# EVAL_TYPE edges link AST nodes (where considering a data type makes sense) with TYPE nodes. While there are also many EVAL_TYPE edges (though slightly fewer), TYPE nodes are preserved in this model (and data type information is removed from AST nodes) due to the necessity of modeling the hierarchy of data types. Thus, maintaining at least this connection between AST nodes and their types is essential.

# PARAMETER_LINK edges only connect METHOD_PARAMETER_IN and METHOD_PARAMETER_OUT nodes. However, since all METHOD_PARAMETER_OUT nodes are removed, maintaining these edges no longer makes sense.

edge_sets {
  key: "EVAL_TYPE"
  value {
    description: "This edge connects a node to its evaluation type."
    source: "TYPE"
    target: "AST_NODE"
  }
}


# TagsAndLocation Layer (https://cpg.joern.io/#schema-ref-tagsandlocation)
#   nodes_LOCATION_*
#   nodes_TAG_*
#   nodes_TAG_NODE_PAIR_*
#   edges_TAGGED_BY_*

# This layer serves as support for storing location information for nodes during custom analyses. Unlike the Finding Layer, which is used primarily for documenting the outcomes of analyses, the TagsAndLocation Layer is used more for storing intermediate analysis products. In the default settings, Joern does not produce these nodes/edgesâ€”therefore, they will not be used.


# Configuration Layer (https://cpg.joern.io/#schema-ref-configuration)
#   nodes_CONFIG_FILE_*

# This layer enables the insertion of configuration files directly into the CPG graph. These nodes are not used because:
#    1) In this thesis, we are working only with source code, so these nodes are unnecessary.
#    2) These nodes are not present in the default settings of Joern.


# Binding Layer (https://cpg.joern.io/#schema-ref-binding)
#   nodes_BINDING_*
#   edges_BINDS_*

# The BINDING node represents a pair - a function name and its signature. The BINDS edge then connects this node to the DECL_TYPE node, which represents the specific signature. However, in this model, we utilize the graph itself to obtain signatures (the RETURN node is connected to the TYPE node, METHOD_PARAMETER_IN is connected to the TYPE node), thus eliminating the need to explicitly store the signature. Moreover, all DECL_TYPE nodes are removed for a similar reason. Therefore, neither BINDING nodes nor BINDS edges are used here.


# Annotation Layer (https://cpg.joern.io/#schema-ref-annotation)
#   nodes_ANNOTATION_*
#   nodes_ANNOTATION_LITERAL_*
#   nodes_ANNOTATION_PARAMETER_*
#   nodes_ANNOTATION_PARAMETER_ASSIGN_*
#   nodes_ARRAY_INITIALIZER_*

# This layer adds nodes representing Java annotations. Since this work primarily deals with the C language, nodes of this type are not present in the generated graphs. Therefore, this layer is not used.


# Base Layer (https://cpg.joern.io/#schema-ref-base)
#   nodes_DECLARATION_*
#   edges_REF_*

# Nodes of the DECLARATION type serve only as a base class over which other nodes such as METHOD, METHOD_PARAMETER_IN, METHOD_PARAMETER_OUT, MEMBER, and LOCAL are defined. Thus, DECLARATION nodes are not used independently in the graph.

# The REF edge signifies that its source node is an identifier accessing the destination node. Examples of connections made by this edge include an IDENTIFIER node (variable) linked to a LOCAL node (local variable) or an identifier type linked to its declaration, etc. This information is useful for determining whether, for instance, a variable is local or not. Moreover, compared to other types of edges, there are not as many REF edges. For these reasons, the REF edge will be used in this model.

edge_sets {
  key: "REF"
  value {
    description: "This edge indicates that the source node is an identifier that denotes access to the destination node. For example, an identifier may reference a local variable."
    source: "AST_NODE"
    target: "AST_NODE"
  }
}
